{"version":3,"sources":["../src/is-error-x.js"],"names":[],"mappings":"AAAA,OAAO,WAAP,MAAwB,iBAAxB;AACA,OAAO,YAAP,MAAyB,kBAAzB;AACA,OAAO,eAAP,MAA4B,oBAA5B;;AAEA,IAAI,UAAU,GAAG,SAAS,YAAT,CAAsB,KAAtB,EAA6B;AAC5C,SAAO,WAAW,CAAC,KAAD,CAAX,KAAuB,gBAA9B;AACD,CAFD;;AAIA,IAAI,UAAU,CAAC,KAAK,CAAC,SAAP,CAAV,KAAgC,KAApC,EAA2C;AACzC,MAAM,UAAU,GAAG,KAAK,CAAC,SAAzB;AACA,MAAM,aAAa,GAAG,UAAtB;;AACA,EAAA,UAAU,GAAG,SAAS,YAAT,CAAsB,KAAtB,EAA6B;AACxC,WAAO,KAAK,KAAK,UAAV,IAAwB,aAAa,CAAC,KAAD,CAA5C;AACD,GAFD;AAGD;AAED;;;;;;;;;AAOA,IAAM,OAAO,GAAG,SAAS,OAAT,CAAiB,KAAjB,EAAwB;AACtC,MAAI,YAAY,CAAC,KAAD,CAAZ,KAAwB,KAA5B,EAAmC;AACjC,WAAO,KAAP;AACD;;AAED,MAAI,MAAM,GAAG,KAAb;AACA,MAAI,OAAO,GAAG,GAAd;;AACA,SAAO,MAAM,IAAI,OAAO,GAAG,CAAC,CAA5B,EAA+B;AAC7B,QAAI,UAAU,CAAC,MAAD,CAAd,EAAwB;AACtB,aAAO,IAAP;AACD;;AAED,IAAA,MAAM,GAAG,eAAe,CAAC,MAAD,CAAxB;AACA,IAAA,OAAO,IAAI,CAAX;AACD;;AAED,SAAO,KAAP;AACD,CAjBD;;AAmBA,eAAe,OAAf","file":"is-error-x.esm.js","sourcesContent":["import toStringTag from 'to-string-tag-x';\nimport isObjectLike from 'is-object-like-x';\nimport $getPrototypeOf from 'get-prototype-of-x';\n\nlet errorCheck = function checkIfError(value) {\n  return toStringTag(value) === '[object Error]';\n};\n\nif (errorCheck(Error.prototype) === false) {\n  const errorProto = Error.prototype;\n  const testStringTag = errorCheck;\n  errorCheck = function checkIfError(value) {\n    return value === errorProto || testStringTag(value);\n  };\n}\n\n/**\n * Determine whether or not a given `value` is an `Error` type.\n *\n * @param {*} value - The object to be tested.\n * @returns {boolean} Returns `true` if `value` is an `Error` type,\n *  else `false`.\n */\nconst isError = function isError(value) {\n  if (isObjectLike(value) === false) {\n    return false;\n  }\n\n  let object = value;\n  let maxLoop = 100;\n  while (object && maxLoop > -1) {\n    if (errorCheck(object)) {\n      return true;\n    }\n\n    object = $getPrototypeOf(object);\n    maxLoop -= 1;\n  }\n\n  return false;\n};\n\nexport default isError;\n"]}